{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,YAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,mB;AAEXC,sB;AACAC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACjC,gCAAIC,cAAcC,UAAUC,IAAV,CAAeV,MAAf,EAAsBD,OAAtB,CAAlB;AACAS,wCAAYG,eAAZ,GAA8B;AAAA,uCAAKR,kBAAkBS,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC,CAAL;AAAA,6BAA9B;AACAP,wCAAYQ,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAACf,UAAJ,EAAgB;AACZA,iDAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,4CAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;AAUAO,wCAAYU,OAAZ,GAAsB;AAAA,uCAAKX,OAAOM,EAAEC,MAAF,CAASK,KAAhB,CAAL;AAAA,6BAAtB;AACH,yBAdM,CAAP;AAeH;;;kDAEoBlB,U,EAAW;AAC5BH,+BAAOsB,OAAP,CACI,UAACC,KAAD,EAAW;AACP,gCAAGpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACIpB,WAAWuB,iBAAX,CAA6BH,KAA7B;;AAEJpB,uCAAWwB,iBAAX,CAA6BJ,KAA7B,EAAmC,EAACK,eAAgB,IAAjB,EAAnC;AACH,yBANL;AAQH;;;sDAEuB;AACpBxB;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacao'];\nconst version = 1;\nconst dbName = 'BancoPanamericano';\n\nlet connection;\nlet close = null;\n    \nexport class ConnectionFactory{\n\n    constructor(){\n        throw new Error('Não eh possivel criar instancias de ConnectionFactory')\n    }\n\n    static getConnection(){\n\n        return new Promise((resolve,reject)=>{\n            let openRequest = indexedDB.open(dbName,version);\n            openRequest.onupgradeneeded = e => ConnectionFactory._createStores(e.target.result);\n            openRequest.onsuccess = e => {\n                if(!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){\n                        throw new Error('Não eh possível fechar a conexão manualmente!');\n                    }\n                }\n                resolve(connection);\n            }\n            openRequest.onerror = e => reject(e.target.error);\n        });\n    }\n\n    static _createStores(connection){\n        stores.forEach(\n            (store) => {\n                if(connection.objectStoreNames.contains(store)) \n                    connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store,{autoIncrement : true});\n            }\n        );\n    }\n\n    static closeConnection(){\n        close();\n    }\n}"]}