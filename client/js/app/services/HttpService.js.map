{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","resp","ok","Error","statusText","url","fetch","then","_handlerErrors","json","dado","headers","method","body","JSON","stringify","_handleErrors","res","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","parse","responseText","send","setRequestHeader","stringfy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;mDAEMC,I,EAAK;AAChB,4BAAG,CAACA,KAAKC,EAAT,EAAa,MAAM,IAAIC,KAAJ,CAAUF,KAAKG,UAAf,CAAN;AACb,+BAAOH,IAAP;AACH;;;wCAEGI,G,EAAI;AAAA;;AACJ,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAQ,MAAKC,cAAL,CAAoBP,IAApB,CAAR;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAQN,KAAKQ,IAAL,EAAR;AAAA,yBAFH,CAAP;AAGH;;;yCAGIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAE,gBAAgB,kBAAlB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAKNH,IALM,CAKD;AAAA,mCAAO,OAAKS,aAAL,CAAmBC,GAAnB,CAAP;AAAA,yBALC,CAAP;AAMH;;;4CAEOZ,G,EAAI;AACR,+BAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACjC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,KAAT,EAAelB,GAAf;AACAgB,gCAAIG,kBAAJ,GAAyB,YAAK;AAC1B,oCAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAuB;AACnB,wCAAGJ,IAAIK,MAAJ,IAAc,GAAjB,EAAqB;AACjBP,gDAAQL,KAAKa,KAAL,CAAWN,IAAIO,YAAf,CAAR;AACH,qCAFD,MAEK;AACDR,+CAAO,8BAAP;AACH;AACJ;AAEJ,6BATD;AAUAC,gCAAIQ,IAAJ;AACH,yBAdM,CAAP;AAeH;;;6CAEQxB,G,EAAKK,I,EAAM;;AAEZ,+BAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,gCAAIE,IAAJ,CAAS,MAAT,EAAiBlB,GAAjB,EAAsB,IAAtB;AACAgB,gCAAIS,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAT,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,oCAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,wCAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,gDAAQL,KAAKa,KAAL,CAAWN,IAAIO,YAAf,CAAR;AACH,qCAHD,MAGO;;AAEHR,+CAAOC,IAAIO,YAAX;AACH;AACJ;AACJ,6BAZD;AAaAP,gCAAIQ,IAAJ,CAASf,KAAKiB,QAAL,CAAcrB,IAAd,CAAT;AACH,yBAnBM,CAAP;AAoBH","file":"HttpService.js","sourcesContent":["export class HttpService{\n\n    _handlerErrors(resp){\n        if(!resp.ok) throw new Error(resp.statusText);\n        return resp;\n    }\n\n    get(url){\n        return fetch(url)\n            .then(resp => this._handlerErrors(resp))\n            .then(resp => resp.json())\n    }\n\n\n    post(url, dado) {\n        \n        return fetch(url, {\n            headers: { 'Content-Type': 'application/json' },\n            method: 'post',\n            body: JSON.stringify(dado)\n        })\n        .then(res => this._handleErrors(res));\n    }\n    \n    old_get(url){\n        return new Promise((resolve,reject)=>{\n            let xhr = new XMLHttpRequest();\n            xhr.open('GET',url);\n            xhr.onreadystatechange = () =>{\n                if(xhr.readyState == 4){\n                    if(xhr.status == 200){\n                        resolve(JSON.parse(xhr.responseText)); \n                    }else{\n                        reject(\"Erro ao buscar do servidor!!\");\n                    }\n                }\n    \n            }\n            xhr.send();\n        });\n    }\n\n    old_post(url, dado) {\n        \n            return new Promise((resolve, reject) => {\n        \n                let xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", url, true);\n                xhr.setRequestHeader(\"Content-type\", \"application/json\");\n                xhr.onreadystatechange = () => {\n        \n                    if (xhr.readyState == 4) {\n        \n                        if (xhr.status == 200) {\n        \n                            resolve(JSON.parse(xhr.responseText));\n                        } else {\n        \n                            reject(xhr.responseText);\n                        }\n                    }\n                };\n                xhr.send(JSON.stringfy(dado));\n            });\n        }\n        \n}"]}